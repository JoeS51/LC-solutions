class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        q = []
        heapq.heappush(q, (float('inf'), 0, 0))
        m = len(heights)
        n = len(heights[0])
        visited = set()
        dirs = {(1, 0), (-1, 0), (0, 1), (0, -1)}
        while q:
            prev_max, i, j = heapq.heappop(q)
            if i == m - 1 and j == n - 1:
                if prev_max == float('inf'):
                    return 0
                return prev_max
            if (i, j) in visited:
                continue
            visited.add((i, j))
            curr_val = heights[i][j]
            for c_i, c_j in dirs:
                n_i = i - c_i
                n_j = j - c_j
                if 0 <= n_i < m and 0 <= n_j < n:
                    next_val = heights[n_i][n_j]
                    if prev_max == float('inf'):
                        n_val = abs(curr_val - next_val)
                    else:
                        n_val = max(prev_max, abs(curr_val - next_val))
                    heapq.heappush(q, ((n_val, n_i, n_j)))
        return -1
            
            

        

